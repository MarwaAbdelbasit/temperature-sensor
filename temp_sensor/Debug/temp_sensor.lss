
temp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000aa8  00000b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  00000b4a  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00002680  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b04  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000353  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ac  00000000  00000000  000035d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00003c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000243  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000667  00000000  00000000  00004043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  8a:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include <avr/io.h>
#include "macros.h"

void ADC_init(void) 
{
	SET_BIT(ADMUX, REFS0); //configure vref
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADCSRA, ADEN); //enable ADC
  94:	37 9a       	sbi	0x06, 7	; 6
	
	//adjust ADC clk
	SET_BIT(ADCSRA, ADPS2);
  96:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA, ADPS1);
  98:	31 9a       	sbi	0x06, 1	; 6
}
  9a:	08 95       	ret

0000009c <ADC_read>:

unsigned short ADC_read(void)
{
	unsigned short read_val;
	SET_BIT(ADCSRA, ADSC); //start conversion;
  9c:	36 9a       	sbi	0x06, 6	; 6
	//while(IS_BIT_CLR(ADCSRA, ADIF)); //still in your position till ADIF become 1
	//SET_BIT(ADCSRA, ADIF);
	while(READ_BIT(ADCSRA, ADSC) == 1);
  9e:	36 99       	sbic	0x06, 6	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_read+0x2>
	read_val = (ADCL);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
  a6:	45 b1       	in	r20, 0x05	; 5
  a8:	34 2f       	mov	r19, r20
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	82 2b       	or	r24, r18
  ae:	93 2b       	or	r25, r19
	return read_val;
  b0:	08 95       	ret

000000b2 <DIO_set_direction>:


//1-Function Description : Set the direction of the given pin in the given port (direction 0 = input : 1 = output)
void DIO_set_direction(char port, char pin, char val)
{
	switch(port)
  b2:	84 34       	cpi	r24, 0x44	; 68
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_set_direction+0x6>
  b6:	71 c0       	rjmp	.+226    	; 0x19a <DIO_set_direction+0xe8>
  b8:	85 34       	cpi	r24, 0x45	; 69
  ba:	48 f4       	brcc	.+18     	; 0xce <DIO_set_direction+0x1c>
  bc:	82 34       	cpi	r24, 0x42	; 66
  be:	99 f1       	breq	.+102    	; 0x126 <DIO_set_direction+0x74>
  c0:	83 34       	cpi	r24, 0x43	; 67
  c2:	08 f0       	brcs	.+2      	; 0xc6 <DIO_set_direction+0x14>
  c4:	4d c0       	rjmp	.+154    	; 0x160 <DIO_set_direction+0xae>
  c6:	81 34       	cpi	r24, 0x41	; 65
  c8:	09 f0       	breq	.+2      	; 0xcc <DIO_set_direction+0x1a>
  ca:	83 c0       	rjmp	.+262    	; 0x1d2 <DIO_set_direction+0x120>
  cc:	0f c0       	rjmp	.+30     	; 0xec <DIO_set_direction+0x3a>
  ce:	82 36       	cpi	r24, 0x62	; 98
  d0:	51 f1       	breq	.+84     	; 0x126 <DIO_set_direction+0x74>
  d2:	83 36       	cpi	r24, 0x63	; 99
  d4:	20 f4       	brcc	.+8      	; 0xde <DIO_set_direction+0x2c>
  d6:	81 36       	cpi	r24, 0x61	; 97
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_set_direction+0x2a>
  da:	7b c0       	rjmp	.+246    	; 0x1d2 <DIO_set_direction+0x120>
  dc:	07 c0       	rjmp	.+14     	; 0xec <DIO_set_direction+0x3a>
  de:	83 36       	cpi	r24, 0x63	; 99
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_set_direction+0x32>
  e2:	3e c0       	rjmp	.+124    	; 0x160 <DIO_set_direction+0xae>
  e4:	84 36       	cpi	r24, 0x64	; 100
  e6:	09 f0       	breq	.+2      	; 0xea <DIO_set_direction+0x38>
  e8:	74 c0       	rjmp	.+232    	; 0x1d2 <DIO_set_direction+0x120>
  ea:	57 c0       	rjmp	.+174    	; 0x19a <DIO_set_direction+0xe8>
	{
		case 'A':
		case 'a':
			if (val==1)
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	69 f4       	brne	.+26     	; 0x10a <DIO_set_direction+0x58>
			{
				DDRA|=(1<<pin);
  f0:	2a b3       	in	r18, 0x1a	; 26
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	ac 01       	movw	r20, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_set_direction+0x4c>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_set_direction+0x48>
 102:	ba 01       	movw	r22, r20
 104:	62 2b       	or	r22, r18
 106:	6a bb       	out	0x1a, r22	; 26
 108:	08 95       	ret
			}
			else
			{
				DDRA&=(~(1<<pin));
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_set_direction+0x66>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_set_direction+0x62>
 11c:	ba 01       	movw	r22, r20
 11e:	60 95       	com	r22
 120:	62 23       	and	r22, r18
 122:	6a bb       	out	0x1a, r22	; 26
 124:	08 95       	ret
			}
		break;
		
		case 'B':
		case 'b':
			if (val==1)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	69 f4       	brne	.+26     	; 0x144 <DIO_set_direction+0x92>
			{
				DDRB|=(1<<pin);
 12a:	27 b3       	in	r18, 0x17	; 23
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	ac 01       	movw	r20, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_set_direction+0x86>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_set_direction+0x82>
 13c:	ba 01       	movw	r22, r20
 13e:	62 2b       	or	r22, r18
 140:	67 bb       	out	0x17, r22	; 23
 142:	08 95       	ret
			}
			else
			{
				DDRB&=(~(1<<pin));
 144:	27 b3       	in	r18, 0x17	; 23
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_set_direction+0xa0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_set_direction+0x9c>
 156:	ba 01       	movw	r22, r20
 158:	60 95       	com	r22
 15a:	62 23       	and	r22, r18
 15c:	67 bb       	out	0x17, r22	; 23
 15e:	08 95       	ret
			}
		break;
		
		case 'C':
		case 'c':
			if (val==1)
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_set_direction+0xcc>
			{
				DDRC|=(1<<pin);
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	ac 01       	movw	r20, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_set_direction+0xc0>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_set_direction+0xbc>
 176:	ba 01       	movw	r22, r20
 178:	62 2b       	or	r22, r18
 17a:	64 bb       	out	0x14, r22	; 20
 17c:	08 95       	ret
			}
			else
			{
				DDRC&=(~(1<<pin));
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_set_direction+0xda>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_set_direction+0xd6>
 190:	ba 01       	movw	r22, r20
 192:	60 95       	com	r22
 194:	62 23       	and	r22, r18
 196:	64 bb       	out	0x14, r22	; 20
 198:	08 95       	ret
			}
		break;
		
		case 'D':
		case 'd':
			if (val==1)
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	69 f4       	brne	.+26     	; 0x1b8 <DIO_set_direction+0x106>
			{
				DDRD|=(1<<pin);
 19e:	21 b3       	in	r18, 0x11	; 17
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	ac 01       	movw	r20, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_set_direction+0xfa>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_set_direction+0xf6>
 1b0:	ba 01       	movw	r22, r20
 1b2:	62 2b       	or	r22, r18
 1b4:	61 bb       	out	0x11, r22	; 17
 1b6:	08 95       	ret
			}
			else
			{
				DDRD&=(~(1<<pin));
 1b8:	21 b3       	in	r18, 0x11	; 17
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	ac 01       	movw	r20, r24
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_set_direction+0x114>
 1c2:	44 0f       	add	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_set_direction+0x110>
 1ca:	ba 01       	movw	r22, r20
 1cc:	60 95       	com	r22
 1ce:	62 23       	and	r22, r18
 1d0:	61 bb       	out	0x11, r22	; 17
 1d2:	08 95       	ret

000001d4 <DIO_write>:


//2-Function Description : Set the value of the given pin in the given port (outputvalue 0 = low : 1 = high)
void DIO_write(char port, char pin, char val)
{
	switch(port)
 1d4:	84 34       	cpi	r24, 0x44	; 68
 1d6:	09 f4       	brne	.+2      	; 0x1da <DIO_write+0x6>
 1d8:	71 c0       	rjmp	.+226    	; 0x2bc <DIO_write+0xe8>
 1da:	85 34       	cpi	r24, 0x45	; 69
 1dc:	48 f4       	brcc	.+18     	; 0x1f0 <DIO_write+0x1c>
 1de:	82 34       	cpi	r24, 0x42	; 66
 1e0:	99 f1       	breq	.+102    	; 0x248 <DIO_write+0x74>
 1e2:	83 34       	cpi	r24, 0x43	; 67
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <DIO_write+0x14>
 1e6:	4d c0       	rjmp	.+154    	; 0x282 <DIO_write+0xae>
 1e8:	81 34       	cpi	r24, 0x41	; 65
 1ea:	09 f0       	breq	.+2      	; 0x1ee <DIO_write+0x1a>
 1ec:	83 c0       	rjmp	.+262    	; 0x2f4 <DIO_write+0x120>
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <DIO_write+0x3a>
 1f0:	82 36       	cpi	r24, 0x62	; 98
 1f2:	51 f1       	breq	.+84     	; 0x248 <DIO_write+0x74>
 1f4:	83 36       	cpi	r24, 0x63	; 99
 1f6:	20 f4       	brcc	.+8      	; 0x200 <DIO_write+0x2c>
 1f8:	81 36       	cpi	r24, 0x61	; 97
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_write+0x2a>
 1fc:	7b c0       	rjmp	.+246    	; 0x2f4 <DIO_write+0x120>
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <DIO_write+0x3a>
 200:	83 36       	cpi	r24, 0x63	; 99
 202:	09 f4       	brne	.+2      	; 0x206 <DIO_write+0x32>
 204:	3e c0       	rjmp	.+124    	; 0x282 <DIO_write+0xae>
 206:	84 36       	cpi	r24, 0x64	; 100
 208:	09 f0       	breq	.+2      	; 0x20c <DIO_write+0x38>
 20a:	74 c0       	rjmp	.+232    	; 0x2f4 <DIO_write+0x120>
 20c:	57 c0       	rjmp	.+174    	; 0x2bc <DIO_write+0xe8>
	{
		case 'A':
		case 'a':
			if (val==1)
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	69 f4       	brne	.+26     	; 0x22c <DIO_write+0x58>
			{
				SET_BIT(PORTA, pin);
 212:	2b b3       	in	r18, 0x1b	; 27
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	ac 01       	movw	r20, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0x4c>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0x48>
 224:	ba 01       	movw	r22, r20
 226:	62 2b       	or	r22, r18
 228:	6b bb       	out	0x1b, r22	; 27
 22a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pin);
 22c:	2b b3       	in	r18, 0x1b	; 27
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_write+0x66>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_write+0x62>
 23e:	ba 01       	movw	r22, r20
 240:	60 95       	com	r22
 242:	62 23       	and	r22, r18
 244:	6b bb       	out	0x1b, r22	; 27
 246:	08 95       	ret
			}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	69 f4       	brne	.+26     	; 0x266 <DIO_write+0x92>
		{
			SET_BIT(PORTB, pin);
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	ac 01       	movw	r20, r24
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0x86>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0x82>
 25e:	ba 01       	movw	r22, r20
 260:	62 2b       	or	r22, r18
 262:	68 bb       	out	0x18, r22	; 24
 264:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB, pin);
 266:	28 b3       	in	r18, 0x18	; 24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_write+0xa0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_write+0x9c>
 278:	ba 01       	movw	r22, r20
 27a:	60 95       	com	r22
 27c:	62 23       	and	r22, r18
 27e:	68 bb       	out	0x18, r22	; 24
 280:	08 95       	ret
		}
		break;	
		
		case 'C':
		case 'c':
		if (val==1)
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	69 f4       	brne	.+26     	; 0x2a0 <DIO_write+0xcc>
		{
			SET_BIT(PORTC, pin);
 286:	25 b3       	in	r18, 0x15	; 21
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_write+0xc0>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_write+0xbc>
 298:	ba 01       	movw	r22, r20
 29a:	62 2b       	or	r22, r18
 29c:	65 bb       	out	0x15, r22	; 21
 29e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC, pin);
 2a0:	25 b3       	in	r18, 0x15	; 21
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_write+0xda>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_write+0xd6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	60 95       	com	r22
 2b6:	62 23       	and	r22, r18
 2b8:	65 bb       	out	0x15, r22	; 21
 2ba:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	69 f4       	brne	.+26     	; 0x2da <DIO_write+0x106>
		{
			SET_BIT(PORTD, pin);
 2c0:	22 b3       	in	r18, 0x12	; 18
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	ac 01       	movw	r20, r24
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_write+0xfa>
 2ca:	44 0f       	add	r20, r20
 2cc:	55 1f       	adc	r21, r21
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_write+0xf6>
 2d2:	ba 01       	movw	r22, r20
 2d4:	62 2b       	or	r22, r18
 2d6:	62 bb       	out	0x12, r22	; 18
 2d8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD, pin);
 2da:	22 b3       	in	r18, 0x12	; 18
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	ac 01       	movw	r20, r24
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_write+0x114>
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_write+0x110>
 2ec:	ba 01       	movw	r22, r20
 2ee:	60 95       	com	r22
 2f0:	62 23       	and	r22, r18
 2f2:	62 bb       	out	0x12, r22	; 18
 2f4:	08 95       	ret

000002f6 <DIO_read>:

//3-Function Description : Returns 1 if the value of the given pin is high and zero if the value is low
char DIO_read(char port, char pin)
{
	char z=0;
	switch(port)
 2f6:	84 34       	cpi	r24, 0x44	; 68
 2f8:	09 f4       	brne	.+2      	; 0x2fc <DIO_read+0x6>
 2fa:	4e c0       	rjmp	.+156    	; 0x398 <DIO_read+0xa2>
 2fc:	85 34       	cpi	r24, 0x45	; 69
 2fe:	40 f4       	brcc	.+16     	; 0x310 <DIO_read+0x1a>
 300:	82 34       	cpi	r24, 0x42	; 66
 302:	31 f1       	breq	.+76     	; 0x350 <DIO_read+0x5a>
 304:	83 34       	cpi	r24, 0x43	; 67
 306:	b0 f5       	brcc	.+108    	; 0x374 <DIO_read+0x7e>
 308:	81 34       	cpi	r24, 0x41	; 65
 30a:	09 f0       	breq	.+2      	; 0x30e <DIO_read+0x18>
 30c:	57 c0       	rjmp	.+174    	; 0x3bc <DIO_read+0xc6>
 30e:	0e c0       	rjmp	.+28     	; 0x32c <DIO_read+0x36>
 310:	82 36       	cpi	r24, 0x62	; 98
 312:	f1 f0       	breq	.+60     	; 0x350 <DIO_read+0x5a>
 314:	83 36       	cpi	r24, 0x63	; 99
 316:	20 f4       	brcc	.+8      	; 0x320 <DIO_read+0x2a>
 318:	81 36       	cpi	r24, 0x61	; 97
 31a:	09 f0       	breq	.+2      	; 0x31e <DIO_read+0x28>
 31c:	4f c0       	rjmp	.+158    	; 0x3bc <DIO_read+0xc6>
 31e:	06 c0       	rjmp	.+12     	; 0x32c <DIO_read+0x36>
 320:	83 36       	cpi	r24, 0x63	; 99
 322:	41 f1       	breq	.+80     	; 0x374 <DIO_read+0x7e>
 324:	84 36       	cpi	r24, 0x64	; 100
 326:	09 f0       	breq	.+2      	; 0x32a <DIO_read+0x34>
 328:	49 c0       	rjmp	.+146    	; 0x3bc <DIO_read+0xc6>
 32a:	36 c0       	rjmp	.+108    	; 0x398 <DIO_read+0xa2>
	{
		case 'A':
		case 'a':
			return z=READ_BIT(PINA, pin);
 32c:	29 b3       	in	r18, 0x19	; 25
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	06 2e       	mov	r0, r22
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_read+0x44>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_read+0x40>
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	82 23       	and	r24, r18
 342:	93 23       	and	r25, r19
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_read+0x54>
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_read+0x50>
 34e:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
			return z=READ_BIT(PINB, pin);
 350:	26 b3       	in	r18, 0x16	; 22
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	06 2e       	mov	r0, r22
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_read+0x68>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_read+0x64>
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	82 23       	and	r24, r18
 366:	93 23       	and	r25, r19
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_read+0x78>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_read+0x74>
 372:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
			return z=READ_BIT(PINC, pin);
 374:	23 b3       	in	r18, 0x13	; 19
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	06 2e       	mov	r0, r22
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_read+0x8c>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_read+0x88>
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	82 23       	and	r24, r18
 38a:	93 23       	and	r25, r19
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_read+0x9c>
 38e:	95 95       	asr	r25
 390:	87 95       	ror	r24
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_read+0x98>
 396:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
			return z=READ_BIT(PIND, pin);
 398:	20 b3       	in	r18, 0x10	; 16
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	06 2e       	mov	r0, r22
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_read+0xb0>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_read+0xac>
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	82 23       	and	r24, r18
 3ae:	93 23       	and	r25, r19
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_read+0xc0>
 3b2:	95 95       	asr	r25
 3b4:	87 95       	ror	r24
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_read+0xbc>
 3ba:	08 95       	ret
		break;	
	}
	return z;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
}
 3be:	08 95       	ret

000003c0 <DIO_toggle>:


//4-Function Description : Reverse the value of the given pin in the given port.
void DIO_toggle(char port, char pin)
{
	switch (port)
 3c0:	84 34       	cpi	r24, 0x44	; 68
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <DIO_toggle+0x6>
 3c4:	3d c0       	rjmp	.+122    	; 0x440 <DIO_toggle+0x80>
 3c6:	85 34       	cpi	r24, 0x45	; 69
 3c8:	40 f4       	brcc	.+16     	; 0x3da <DIO_toggle+0x1a>
 3ca:	82 34       	cpi	r24, 0x42	; 66
 3cc:	f9 f0       	breq	.+62     	; 0x40c <DIO_toggle+0x4c>
 3ce:	83 34       	cpi	r24, 0x43	; 67
 3d0:	50 f5       	brcc	.+84     	; 0x426 <DIO_toggle+0x66>
 3d2:	81 34       	cpi	r24, 0x41	; 65
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <DIO_toggle+0x18>
 3d6:	40 c0       	rjmp	.+128    	; 0x458 <DIO_toggle+0x98>
 3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <DIO_toggle+0x32>
 3da:	82 36       	cpi	r24, 0x62	; 98
 3dc:	b9 f0       	breq	.+46     	; 0x40c <DIO_toggle+0x4c>
 3de:	83 36       	cpi	r24, 0x63	; 99
 3e0:	18 f4       	brcc	.+6      	; 0x3e8 <DIO_toggle+0x28>
 3e2:	81 36       	cpi	r24, 0x61	; 97
 3e4:	c9 f5       	brne	.+114    	; 0x458 <DIO_toggle+0x98>
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <DIO_toggle+0x32>
 3e8:	83 36       	cpi	r24, 0x63	; 99
 3ea:	e9 f0       	breq	.+58     	; 0x426 <DIO_toggle+0x66>
 3ec:	84 36       	cpi	r24, 0x64	; 100
 3ee:	a1 f5       	brne	.+104    	; 0x458 <DIO_toggle+0x98>
 3f0:	27 c0       	rjmp	.+78     	; 0x440 <DIO_toggle+0x80>
	{
	case 'A':
	case 'a':
		TOG_BIT(PORTA, pin);
 3f2:	2b b3       	in	r18, 0x1b	; 27
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_toggle+0x40>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_toggle+0x3c>
 404:	ba 01       	movw	r22, r20
 406:	62 27       	eor	r22, r18
 408:	6b bb       	out	0x1b, r22	; 27
	break;
 40a:	08 95       	ret
	
	case 'B':
	case 'b':
		TOG_BIT(PORTB, pin);
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_toggle+0x5a>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_toggle+0x56>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	68 bb       	out	0x18, r22	; 24
	break;
 424:	08 95       	ret
	
	case 'C':
	case 'c':
		TOG_BIT(PORTC, pin);
 426:	25 b3       	in	r18, 0x15	; 21
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_toggle+0x74>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_toggle+0x70>
 438:	ba 01       	movw	r22, r20
 43a:	62 27       	eor	r22, r18
 43c:	65 bb       	out	0x15, r22	; 21
	break;
 43e:	08 95       	ret
	
	case 'D':
	case 'd':
		TOG_BIT(PORTD, pin);
 440:	22 b3       	in	r18, 0x12	; 18
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	ac 01       	movw	r20, r24
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_toggle+0x8e>
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_toggle+0x8a>
 452:	ba 01       	movw	r22, r20
 454:	62 27       	eor	r22, r18
 456:	62 bb       	out	0x12, r22	; 18
 458:	08 95       	ret

0000045a <DIO_set_port_direction>:


//5-Function Description : set the direction of whole port .
void DIO_set_port_direction(char port, char direction)
{
	switch (port)
 45a:	84 34       	cpi	r24, 0x44	; 68
 45c:	d9 f0       	breq	.+54     	; 0x494 <DIO_set_port_direction+0x3a>
 45e:	85 34       	cpi	r24, 0x45	; 69
 460:	38 f4       	brcc	.+14     	; 0x470 <DIO_set_port_direction+0x16>
 462:	82 34       	cpi	r24, 0x42	; 66
 464:	99 f0       	breq	.+38     	; 0x48c <DIO_set_port_direction+0x32>
 466:	83 34       	cpi	r24, 0x43	; 67
 468:	98 f4       	brcc	.+38     	; 0x490 <DIO_set_port_direction+0x36>
 46a:	81 34       	cpi	r24, 0x41	; 65
 46c:	a1 f4       	brne	.+40     	; 0x496 <DIO_set_port_direction+0x3c>
 46e:	0c c0       	rjmp	.+24     	; 0x488 <DIO_set_port_direction+0x2e>
 470:	82 36       	cpi	r24, 0x62	; 98
 472:	61 f0       	breq	.+24     	; 0x48c <DIO_set_port_direction+0x32>
 474:	83 36       	cpi	r24, 0x63	; 99
 476:	18 f4       	brcc	.+6      	; 0x47e <DIO_set_port_direction+0x24>
 478:	81 36       	cpi	r24, 0x61	; 97
 47a:	69 f4       	brne	.+26     	; 0x496 <DIO_set_port_direction+0x3c>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <DIO_set_port_direction+0x2e>
 47e:	83 36       	cpi	r24, 0x63	; 99
 480:	39 f0       	breq	.+14     	; 0x490 <DIO_set_port_direction+0x36>
 482:	84 36       	cpi	r24, 0x64	; 100
 484:	41 f4       	brne	.+16     	; 0x496 <DIO_set_port_direction+0x3c>
 486:	06 c0       	rjmp	.+12     	; 0x494 <DIO_set_port_direction+0x3a>
	{
		case 'A':
		case 'a':
			DDRA=direction;
 488:	6a bb       	out	0x1a, r22	; 26
		break;
 48a:	08 95       	ret
		
		case 'B':
		case 'b':
			DDRB=direction;
 48c:	67 bb       	out	0x17, r22	; 23
		break;
 48e:	08 95       	ret
		
		case 'C':
		case 'c':
			DDRC=direction;
 490:	64 bb       	out	0x14, r22	; 20
		break;
 492:	08 95       	ret
		
		case 'D':
		case 'd':
			DDRD=direction;
 494:	61 bb       	out	0x11, r22	; 17
 496:	08 95       	ret

00000498 <DIO_write_port>:


//6-Function Description : Write the value to all port pins.
void DIO_write_port(char port, char val)
{
	switch (port)
 498:	84 34       	cpi	r24, 0x44	; 68
 49a:	d9 f0       	breq	.+54     	; 0x4d2 <DIO_write_port+0x3a>
 49c:	85 34       	cpi	r24, 0x45	; 69
 49e:	38 f4       	brcc	.+14     	; 0x4ae <DIO_write_port+0x16>
 4a0:	82 34       	cpi	r24, 0x42	; 66
 4a2:	99 f0       	breq	.+38     	; 0x4ca <DIO_write_port+0x32>
 4a4:	83 34       	cpi	r24, 0x43	; 67
 4a6:	98 f4       	brcc	.+38     	; 0x4ce <DIO_write_port+0x36>
 4a8:	81 34       	cpi	r24, 0x41	; 65
 4aa:	a1 f4       	brne	.+40     	; 0x4d4 <DIO_write_port+0x3c>
 4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <DIO_write_port+0x2e>
 4ae:	82 36       	cpi	r24, 0x62	; 98
 4b0:	61 f0       	breq	.+24     	; 0x4ca <DIO_write_port+0x32>
 4b2:	83 36       	cpi	r24, 0x63	; 99
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <DIO_write_port+0x24>
 4b6:	81 36       	cpi	r24, 0x61	; 97
 4b8:	69 f4       	brne	.+26     	; 0x4d4 <DIO_write_port+0x3c>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <DIO_write_port+0x2e>
 4bc:	83 36       	cpi	r24, 0x63	; 99
 4be:	39 f0       	breq	.+14     	; 0x4ce <DIO_write_port+0x36>
 4c0:	84 36       	cpi	r24, 0x64	; 100
 4c2:	41 f4       	brne	.+16     	; 0x4d4 <DIO_write_port+0x3c>
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <DIO_write_port+0x3a>
	{
		case 'A':
		case 'a':
			PORTA=val;
 4c6:	6b bb       	out	0x1b, r22	; 27
		break;
 4c8:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB=val;
 4ca:	68 bb       	out	0x18, r22	; 24
		break;
 4cc:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC=val;
 4ce:	65 bb       	out	0x15, r22	; 21
		break;
 4d0:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD=val;
 4d2:	62 bb       	out	0x12, r22	; 18
 4d4:	08 95       	ret

000004d6 <DIO_read_port>:

//7-Function Description : read the value of the port .
char DIO_read_port(char port)
{
	char z=0;
	switch(port)
 4d6:	84 34       	cpi	r24, 0x44	; 68
 4d8:	d9 f0       	breq	.+54     	; 0x510 <DIO_read_port+0x3a>
 4da:	85 34       	cpi	r24, 0x45	; 69
 4dc:	38 f4       	brcc	.+14     	; 0x4ec <DIO_read_port+0x16>
 4de:	82 34       	cpi	r24, 0x42	; 66
 4e0:	99 f0       	breq	.+38     	; 0x508 <DIO_read_port+0x32>
 4e2:	83 34       	cpi	r24, 0x43	; 67
 4e4:	98 f4       	brcc	.+38     	; 0x50c <DIO_read_port+0x36>
 4e6:	81 34       	cpi	r24, 0x41	; 65
 4e8:	a9 f4       	brne	.+42     	; 0x514 <DIO_read_port+0x3e>
 4ea:	0c c0       	rjmp	.+24     	; 0x504 <DIO_read_port+0x2e>
 4ec:	82 36       	cpi	r24, 0x62	; 98
 4ee:	61 f0       	breq	.+24     	; 0x508 <DIO_read_port+0x32>
 4f0:	83 36       	cpi	r24, 0x63	; 99
 4f2:	18 f4       	brcc	.+6      	; 0x4fa <DIO_read_port+0x24>
 4f4:	81 36       	cpi	r24, 0x61	; 97
 4f6:	71 f4       	brne	.+28     	; 0x514 <DIO_read_port+0x3e>
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <DIO_read_port+0x2e>
 4fa:	83 36       	cpi	r24, 0x63	; 99
 4fc:	39 f0       	breq	.+14     	; 0x50c <DIO_read_port+0x36>
 4fe:	84 36       	cpi	r24, 0x64	; 100
 500:	49 f4       	brne	.+18     	; 0x514 <DIO_read_port+0x3e>
 502:	06 c0       	rjmp	.+12     	; 0x510 <DIO_read_port+0x3a>
	{
		case 'A':
		case 'a':
			return z=PINA;
 504:	89 b3       	in	r24, 0x19	; 25
 506:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
			return z=PINB;
 508:	86 b3       	in	r24, 0x16	; 22
 50a:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
			return z=PINC;
 50c:	83 b3       	in	r24, 0x13	; 19
 50e:	08 95       	ret
		break;	
		
		case 'D':
		case 'd':
			return z=PIND;
 510:	80 b3       	in	r24, 0x10	; 16
 512:	08 95       	ret
		break;
	}
	return z;
 514:	80 e0       	ldi	r24, 0x00	; 0
}
 516:	08 95       	ret

00000518 <DIO_connect_pullup>:


//8_Connect and disconnect pull up resistor to the given pin at the given port 
void DIO_connect_pullup(char port, char pin, char connect_pullup)
{
	switch(port)
 518:	84 34       	cpi	r24, 0x44	; 68
 51a:	09 f4       	brne	.+2      	; 0x51e <DIO_connect_pullup+0x6>
 51c:	71 c0       	rjmp	.+226    	; 0x600 <DIO_connect_pullup+0xe8>
 51e:	85 34       	cpi	r24, 0x45	; 69
 520:	48 f4       	brcc	.+18     	; 0x534 <DIO_connect_pullup+0x1c>
 522:	82 34       	cpi	r24, 0x42	; 66
 524:	99 f1       	breq	.+102    	; 0x58c <DIO_connect_pullup+0x74>
 526:	83 34       	cpi	r24, 0x43	; 67
 528:	08 f0       	brcs	.+2      	; 0x52c <DIO_connect_pullup+0x14>
 52a:	4d c0       	rjmp	.+154    	; 0x5c6 <DIO_connect_pullup+0xae>
 52c:	81 34       	cpi	r24, 0x41	; 65
 52e:	09 f0       	breq	.+2      	; 0x532 <DIO_connect_pullup+0x1a>
 530:	83 c0       	rjmp	.+262    	; 0x638 <DIO_connect_pullup+0x120>
 532:	0f c0       	rjmp	.+30     	; 0x552 <DIO_connect_pullup+0x3a>
 534:	82 36       	cpi	r24, 0x62	; 98
 536:	51 f1       	breq	.+84     	; 0x58c <DIO_connect_pullup+0x74>
 538:	83 36       	cpi	r24, 0x63	; 99
 53a:	20 f4       	brcc	.+8      	; 0x544 <DIO_connect_pullup+0x2c>
 53c:	81 36       	cpi	r24, 0x61	; 97
 53e:	09 f0       	breq	.+2      	; 0x542 <DIO_connect_pullup+0x2a>
 540:	7b c0       	rjmp	.+246    	; 0x638 <DIO_connect_pullup+0x120>
 542:	07 c0       	rjmp	.+14     	; 0x552 <DIO_connect_pullup+0x3a>
 544:	83 36       	cpi	r24, 0x63	; 99
 546:	09 f4       	brne	.+2      	; 0x54a <DIO_connect_pullup+0x32>
 548:	3e c0       	rjmp	.+124    	; 0x5c6 <DIO_connect_pullup+0xae>
 54a:	84 36       	cpi	r24, 0x64	; 100
 54c:	09 f0       	breq	.+2      	; 0x550 <DIO_connect_pullup+0x38>
 54e:	74 c0       	rjmp	.+232    	; 0x638 <DIO_connect_pullup+0x120>
 550:	57 c0       	rjmp	.+174    	; 0x600 <DIO_connect_pullup+0xe8>
	{
		case 'A':
		case 'a':
			if (connect_pullup == 1)
 552:	41 30       	cpi	r20, 0x01	; 1
 554:	69 f4       	brne	.+26     	; 0x570 <DIO_connect_pullup+0x58>
			{
				SET_BIT(PORTA, pin);
 556:	2b b3       	in	r18, 0x1b	; 27
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	ac 01       	movw	r20, r24
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_connect_pullup+0x4c>
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_connect_pullup+0x48>
 568:	ba 01       	movw	r22, r20
 56a:	62 2b       	or	r22, r18
 56c:	6b bb       	out	0x1b, r22	; 27
 56e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pin);
 570:	2b b3       	in	r18, 0x1b	; 27
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	ac 01       	movw	r20, r24
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_connect_pullup+0x66>
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_connect_pullup+0x62>
 582:	ba 01       	movw	r22, r20
 584:	60 95       	com	r22
 586:	62 23       	and	r22, r18
 588:	6b bb       	out	0x1b, r22	; 27
 58a:	08 95       	ret
			}
		break;

		case 'B':
		case 'b':
			if (connect_pullup == 1)
 58c:	41 30       	cpi	r20, 0x01	; 1
 58e:	69 f4       	brne	.+26     	; 0x5aa <DIO_connect_pullup+0x92>
			{
				SET_BIT(PORTB, pin);
 590:	28 b3       	in	r18, 0x18	; 24
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	ac 01       	movw	r20, r24
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_connect_pullup+0x86>
 59a:	44 0f       	add	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_connect_pullup+0x82>
 5a2:	ba 01       	movw	r22, r20
 5a4:	62 2b       	or	r22, r18
 5a6:	68 bb       	out	0x18, r22	; 24
 5a8:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pin);
 5aa:	28 b3       	in	r18, 0x18	; 24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	ac 01       	movw	r20, r24
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_connect_pullup+0xa0>
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_connect_pullup+0x9c>
 5bc:	ba 01       	movw	r22, r20
 5be:	60 95       	com	r22
 5c0:	62 23       	and	r22, r18
 5c2:	68 bb       	out	0x18, r22	; 24
 5c4:	08 95       	ret
			}
		break;

		case 'C':
		case 'c':
			if (connect_pullup == 1)
 5c6:	41 30       	cpi	r20, 0x01	; 1
 5c8:	69 f4       	brne	.+26     	; 0x5e4 <DIO_connect_pullup+0xcc>
			{
				SET_BIT(PORTC, pin);
 5ca:	25 b3       	in	r18, 0x15	; 21
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	ac 01       	movw	r20, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_connect_pullup+0xc0>
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	6a 95       	dec	r22
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_connect_pullup+0xbc>
 5dc:	ba 01       	movw	r22, r20
 5de:	62 2b       	or	r22, r18
 5e0:	65 bb       	out	0x15, r22	; 21
 5e2:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pin);
 5e4:	25 b3       	in	r18, 0x15	; 21
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	ac 01       	movw	r20, r24
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_connect_pullup+0xda>
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_connect_pullup+0xd6>
 5f6:	ba 01       	movw	r22, r20
 5f8:	60 95       	com	r22
 5fa:	62 23       	and	r22, r18
 5fc:	65 bb       	out	0x15, r22	; 21
 5fe:	08 95       	ret
			}
		break;

		case 'D':
		case 'd':
			if (connect_pullup == 1)
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	69 f4       	brne	.+26     	; 0x61e <DIO_connect_pullup+0x106>
			{
				SET_BIT(PORTD, pin);
 604:	22 b3       	in	r18, 0x12	; 18
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	ac 01       	movw	r20, r24
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_connect_pullup+0xfa>
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	6a 95       	dec	r22
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_connect_pullup+0xf6>
 616:	ba 01       	movw	r22, r20
 618:	62 2b       	or	r22, r18
 61a:	62 bb       	out	0x12, r22	; 18
 61c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD, pin);
 61e:	22 b3       	in	r18, 0x12	; 18
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	ac 01       	movw	r20, r24
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_connect_pullup+0x114>
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_connect_pullup+0x110>
 630:	ba 01       	movw	r22, r20
 632:	60 95       	com	r22
 634:	62 23       	and	r22, r18
 636:	62 bb       	out	0x12, r22	; 18
 638:	08 95       	ret

0000063a <send_falling_edge>:

}

void send_falling_edge(void)
{
	DIO_write('B', EN, 1);
 63a:	82 e4       	ldi	r24, 0x42	; 66
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 644:	8f e9       	ldi	r24, 0x9F	; 159
 646:	9f e0       	ldi	r25, 0x0F	; 15
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <send_falling_edge+0xe>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <send_falling_edge+0x14>
 64e:	00 00       	nop
	_delay_ms(2);
	DIO_write('B', EN, 0);
 650:	82 e4       	ldi	r24, 0x42	; 66
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_write>
 65a:	8f e9       	ldi	r24, 0x9F	; 159
 65c:	9f e0       	ldi	r25, 0x0F	; 15
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <send_falling_edge+0x24>
 662:	00 c0       	rjmp	.+0      	; 0x664 <send_falling_edge+0x2a>
 664:	00 00       	nop
	_delay_ms(2);
}
 666:	08 95       	ret

00000668 <LCD_send_cmd>:

void LCD_send_cmd(char cmd)
{
 668:	68 2f       	mov	r22, r24
	DIO_write_port('A', cmd);
 66a:	81 e4       	ldi	r24, 0x41	; 65
 66c:	0e 94 4c 02 	call	0x498	; 0x498 <DIO_write_port>
	DIO_write('B', RS, 0);
 670:	82 e4       	ldi	r24, 0x42	; 66
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_write>
	send_falling_edge();
 67a:	0e 94 1d 03 	call	0x63a	; 0x63a <send_falling_edge>
	DIO_write('B', RS, 0);
	send_falling_edge();
	_delay_ms(1);
	#endif
	*/
}
 67e:	08 95       	ret

00000680 <LCD_init>:
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	91 ee       	ldi	r25, 0xE1	; 225
 684:	a4 e0       	ldi	r26, 0x04	; 4
 686:	81 50       	subi	r24, 0x01	; 1
 688:	90 40       	sbci	r25, 0x00	; 0
 68a:	a0 40       	sbci	r26, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <LCD_init+0x6>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <LCD_init+0x10>
 690:	00 00       	nop
#define EIGHT_BITS 0x38

void LCD_init(void)
{
	_delay_ms(200);
	DIO_set_port_direction('A', 1);
 692:	81 e4       	ldi	r24, 0x41	; 65
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_set_port_direction>
	DIO_set_direction('B', EN, 1);
 69a:	82 e4       	ldi	r24, 0x42	; 66
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_set_direction>
	DIO_set_direction('B', RS, 1);
 6a4:	82 e4       	ldi	r24, 0x42	; 66
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_set_direction>
	DIO_set_direction('B', RW, 1);
 6ae:	82 e4       	ldi	r24, 0x42	; 66
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_set_direction>
	DIO_write('B', RW, 0);
 6b8:	82 e4       	ldi	r24, 0x42	; 66
 6ba:	62 e0       	ldi	r22, 0x02	; 2
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_write>
	
	LCD_send_cmd(EIGHT_BITS);
 6c2:	88 e3       	ldi	r24, 0x38	; 56
 6c4:	0e 94 34 03 	call	0x668	; 0x668 <LCD_send_cmd>
 6c8:	af ec       	ldi	r26, 0xCF	; 207
 6ca:	b7 e0       	ldi	r27, 0x07	; 7
 6cc:	11 97       	sbiw	r26, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCD_init+0x4c>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <LCD_init+0x52>
 6d2:	00 00       	nop
	_delay_ms(1);
	
	LCD_send_cmd(CURSOR_ON_DISPLAY_ON);
 6d4:	8e e0       	ldi	r24, 0x0E	; 14
 6d6:	0e 94 34 03 	call	0x668	; 0x668 <LCD_send_cmd>
 6da:	8f ec       	ldi	r24, 0xCF	; 207
 6dc:	97 e0       	ldi	r25, 0x07	; 7
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <LCD_init+0x5e>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <LCD_init+0x64>
 6e4:	00 00       	nop
	_delay_ms(1);
	
	//LCD_send_cmd(CLR_SCREEN);
	//_delay_ms(1);
	
	LCD_send_cmd(ENTRY_MODE);
 6e6:	86 e0       	ldi	r24, 0x06	; 6
 6e8:	0e 94 34 03 	call	0x668	; 0x668 <LCD_send_cmd>
 6ec:	af ec       	ldi	r26, 0xCF	; 207
 6ee:	b7 e0       	ldi	r27, 0x07	; 7
 6f0:	11 97       	sbiw	r26, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <LCD_init+0x70>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <LCD_init+0x76>
 6f6:	00 00       	nop
	
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	*/

}
 6f8:	08 95       	ret

000006fa <LCD_send_char>:
	#endif
	*/
}

void LCD_send_char(char data)
{
 6fa:	68 2f       	mov	r22, r24
	DIO_write_port('A', data);
 6fc:	81 e4       	ldi	r24, 0x41	; 65
 6fe:	0e 94 4c 02 	call	0x498	; 0x498 <DIO_write_port>
	DIO_write('B', RS, 1);
 702:	82 e4       	ldi	r24, 0x42	; 66
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	41 e0       	ldi	r20, 0x01	; 1
 708:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_write>
	send_falling_edge();
 70c:	0e 94 1d 03 	call	0x63a	; 0x63a <send_falling_edge>
	DIO_write('B', RS, 1);
	send_falling_edge();
	_delay_ms(1);
	#endif
	*/
}
 710:	08 95       	ret

00000712 <LCD_send_string>:

void LCD_send_string(char *data)
{
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	ec 01       	movw	r28, r24
	while ((*data)!='\0')
 718:	88 81       	ld	r24, Y
 71a:	88 23       	and	r24, r24
 71c:	31 f0       	breq	.+12     	; 0x72a <LCD_send_string+0x18>
	_delay_ms(1);
	#endif
	*/
}

void LCD_send_string(char *data)
 71e:	21 96       	adiw	r28, 0x01	; 1
{
	while ((*data)!='\0')
	{
		LCD_send_char(*data);
 720:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
	*/
}

void LCD_send_string(char *data)
{
	while ((*data)!='\0')
 724:	89 91       	ld	r24, Y+
 726:	88 23       	and	r24, r24
 728:	d9 f7       	brne	.-10     	; 0x720 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
	}
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	08 95       	ret

00000730 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	0e 94 34 03 	call	0x668	; 0x668 <LCD_send_cmd>
 736:	8f e1       	ldi	r24, 0x1F	; 31
 738:	9e e4       	ldi	r25, 0x4E	; 78
 73a:	01 97       	sbiw	r24, 0x01	; 1
 73c:	f1 f7       	brne	.-4      	; 0x73a <LCD_clear_screen+0xa>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <LCD_clear_screen+0x10>
 740:	00 00       	nop
	_delay_ms(10);
}
 742:	08 95       	ret

00000744 <LCD_move_cursor>:

void LCD_move_cursor(char row, char column)
{
	char data = 0;
	if(row>2 || row<1 || column>16 || column<1)
 744:	98 2f       	mov	r25, r24
 746:	91 50       	subi	r25, 0x01	; 1
 748:	92 30       	cpi	r25, 0x02	; 2
 74a:	70 f4       	brcc	.+28     	; 0x768 <LCD_move_cursor+0x24>
 74c:	61 31       	cpi	r22, 0x11	; 17
 74e:	70 f4       	brcc	.+28     	; 0x76c <LCD_move_cursor+0x28>
 750:	66 23       	and	r22, r22
 752:	71 f0       	breq	.+28     	; 0x770 <LCD_move_cursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	19 f4       	brne	.+6      	; 0x75e <LCD_move_cursor+0x1a>
	{
		data = 0x80 + column-1;
 758:	86 2f       	mov	r24, r22
 75a:	81 58       	subi	r24, 0x81	; 129
 75c:	0c c0       	rjmp	.+24     	; 0x776 <LCD_move_cursor+0x32>
	}
	else if (row == 2)
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	49 f4       	brne	.+18     	; 0x774 <LCD_move_cursor+0x30>
	{
		data = 0xc0 + column-1;
 762:	86 2f       	mov	r24, r22
 764:	81 54       	subi	r24, 0x41	; 65
 766:	07 c0       	rjmp	.+14     	; 0x776 <LCD_move_cursor+0x32>
void LCD_move_cursor(char row, char column)
{
	char data = 0;
	if(row>2 || row<1 || column>16 || column<1)
	{
		data = 0x80;
 768:	80 e8       	ldi	r24, 0x80	; 128
 76a:	05 c0       	rjmp	.+10     	; 0x776 <LCD_move_cursor+0x32>
 76c:	80 e8       	ldi	r24, 0x80	; 128
 76e:	03 c0       	rjmp	.+6      	; 0x776 <LCD_move_cursor+0x32>
 770:	80 e8       	ldi	r24, 0x80	; 128
 772:	01 c0       	rjmp	.+2      	; 0x776 <LCD_move_cursor+0x32>
	_delay_ms(10);
}

void LCD_move_cursor(char row, char column)
{
	char data = 0;
 774:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row == 2)
	{
		data = 0xc0 + column-1;
	}
	LCD_send_cmd(data);
 776:	0e 94 34 03 	call	0x668	; 0x668 <LCD_send_cmd>
 77a:	8f ec       	ldi	r24, 0xCF	; 207
 77c:	97 e0       	ldi	r25, 0x07	; 7
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <LCD_move_cursor+0x3a>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_move_cursor+0x40>
 784:	00 00       	nop
	_delay_ms(1);
 786:	08 95       	ret

00000788 <main>:
char read_val;
unsigned short temperature;

int main(void)
{
	LCD_init();
 788:	0e 94 40 03 	call	0x680	; 0x680 <LCD_init>
	ADC_init();
 78c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_send_string("temperature=");
 790:	80 e6       	ldi	r24, 0x60	; 96
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 89 03 	call	0x712	; 0x712 <LCD_send_string>
        temperature = (ADC_read()*0.25);
		if(temperature<10)
		{
			LCD_move_cursor(1, 13);
			LCD_send_char(0x30);
			LCD_send_char((temperature%10)+48);
 798:	ca e0       	ldi	r28, 0x0A	; 10
 79a:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_init();
	ADC_init();
	LCD_send_string("temperature=");
    while(1)
    {
        temperature = (ADC_read()*0.25);
 79c:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_read>
 7a0:	bc 01       	movw	r22, r24
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 7aa:	20 e0       	ldi	r18, 0x00	; 0
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	40 e8       	ldi	r20, 0x80	; 128
 7b0:	5e e3       	ldi	r21, 0x3E	; 62
 7b2:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 7b6:	0e 94 21 04 	call	0x842	; 0x842 <__fixunssfsi>
 7ba:	ab 01       	movw	r20, r22
 7bc:	bc 01       	movw	r22, r24
 7be:	50 93 6f 00 	sts	0x006F, r21
 7c2:	40 93 6e 00 	sts	0x006E, r20
		if(temperature<10)
 7c6:	4a 30       	cpi	r20, 0x0A	; 10
 7c8:	51 05       	cpc	r21, r1
 7ca:	c0 f4       	brcc	.+48     	; 0x7fc <main+0x74>
		{
			LCD_move_cursor(1, 13);
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	6d e0       	ldi	r22, 0x0D	; 13
 7d0:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_move_cursor>
			LCD_send_char(0x30);
 7d4:	80 e3       	ldi	r24, 0x30	; 48
 7d6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
			LCD_send_char((temperature%10)+48);
 7da:	80 91 6e 00 	lds	r24, 0x006E
 7de:	90 91 6f 00 	lds	r25, 0x006F
 7e2:	be 01       	movw	r22, r28
 7e4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 7e8:	80 5d       	subi	r24, 0xD0	; 208
 7ea:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
			LCD_send_char(0xdf);
 7ee:	8f ed       	ldi	r24, 0xDF	; 223
 7f0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
			LCD_send_char(0x43);
 7f4:	83 e4       	ldi	r24, 0x43	; 67
 7f6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
 7fa:	d0 cf       	rjmp	.-96     	; 0x79c <main+0x14>
		}
		else if (temperature<100)
 7fc:	44 36       	cpi	r20, 0x64	; 100
 7fe:	51 05       	cpc	r21, r1
 800:	68 f6       	brcc	.-102    	; 0x79c <main+0x14>
		{
			LCD_move_cursor(1, 13);
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	6d e0       	ldi	r22, 0x0D	; 13
 806:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_move_cursor>
			LCD_send_char((temperature/10)+48);
 80a:	80 91 6e 00 	lds	r24, 0x006E
 80e:	90 91 6f 00 	lds	r25, 0x006F
 812:	be 01       	movw	r22, r28
 814:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 818:	86 2f       	mov	r24, r22
 81a:	80 5d       	subi	r24, 0xD0	; 208
 81c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
			LCD_send_char((temperature%10)+48);
 820:	80 91 6e 00 	lds	r24, 0x006E
 824:	90 91 6f 00 	lds	r25, 0x006F
 828:	be 01       	movw	r22, r28
 82a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 82e:	80 5d       	subi	r24, 0xD0	; 208
 830:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
			LCD_send_char(0xdf);
 834:	8f ed       	ldi	r24, 0xDF	; 223
 836:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
			LCD_send_char(0x43);
 83a:	83 e4       	ldi	r24, 0x43	; 67
 83c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_char>
 840:	ad cf       	rjmp	.-166    	; 0x79c <main+0x14>

00000842 <__fixunssfsi>:
 842:	70 d0       	rcall	.+224    	; 0x924 <__fp_splitA>
 844:	88 f0       	brcs	.+34     	; 0x868 <__stack+0x9>
 846:	9f 57       	subi	r25, 0x7F	; 127
 848:	90 f0       	brcs	.+36     	; 0x86e <__stack+0xf>
 84a:	b9 2f       	mov	r27, r25
 84c:	99 27       	eor	r25, r25
 84e:	b7 51       	subi	r27, 0x17	; 23
 850:	a0 f0       	brcs	.+40     	; 0x87a <__stack+0x1b>
 852:	d1 f0       	breq	.+52     	; 0x888 <__stack+0x29>
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	1a f0       	brmi	.+6      	; 0x864 <__stack+0x5>
 85e:	ba 95       	dec	r27
 860:	c9 f7       	brne	.-14     	; 0x854 <__fixunssfsi+0x12>
 862:	12 c0       	rjmp	.+36     	; 0x888 <__stack+0x29>
 864:	b1 30       	cpi	r27, 0x01	; 1
 866:	81 f0       	breq	.+32     	; 0x888 <__stack+0x29>
 868:	77 d0       	rcall	.+238    	; 0x958 <__fp_zero>
 86a:	b1 e0       	ldi	r27, 0x01	; 1
 86c:	08 95       	ret
 86e:	74 c0       	rjmp	.+232    	; 0x958 <__fp_zero>
 870:	67 2f       	mov	r22, r23
 872:	78 2f       	mov	r23, r24
 874:	88 27       	eor	r24, r24
 876:	b8 5f       	subi	r27, 0xF8	; 248
 878:	39 f0       	breq	.+14     	; 0x888 <__stack+0x29>
 87a:	b9 3f       	cpi	r27, 0xF9	; 249
 87c:	cc f3       	brlt	.-14     	; 0x870 <__stack+0x11>
 87e:	86 95       	lsr	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	b3 95       	inc	r27
 886:	d9 f7       	brne	.-10     	; 0x87e <__stack+0x1f>
 888:	3e f4       	brtc	.+14     	; 0x898 <__stack+0x39>
 88a:	90 95       	com	r25
 88c:	80 95       	com	r24
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	08 95       	ret

0000089a <__floatunsisf>:
 89a:	e8 94       	clt
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <__floatsisf+0x12>

0000089e <__floatsisf>:
 89e:	97 fb       	bst	r25, 7
 8a0:	3e f4       	brtc	.+14     	; 0x8b0 <__floatsisf+0x12>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	99 23       	and	r25, r25
 8b2:	a9 f0       	breq	.+42     	; 0x8de <__floatsisf+0x40>
 8b4:	f9 2f       	mov	r31, r25
 8b6:	96 e9       	ldi	r25, 0x96	; 150
 8b8:	bb 27       	eor	r27, r27
 8ba:	93 95       	inc	r25
 8bc:	f6 95       	lsr	r31
 8be:	87 95       	ror	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b7 95       	ror	r27
 8c6:	f1 11       	cpse	r31, r1
 8c8:	f8 cf       	rjmp	.-16     	; 0x8ba <__floatsisf+0x1c>
 8ca:	fa f4       	brpl	.+62     	; 0x90a <__floatsisf+0x6c>
 8cc:	bb 0f       	add	r27, r27
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <__floatsisf+0x36>
 8d0:	60 ff       	sbrs	r22, 0
 8d2:	1b c0       	rjmp	.+54     	; 0x90a <__floatsisf+0x6c>
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	8f 4f       	sbci	r24, 0xFF	; 255
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	16 c0       	rjmp	.+44     	; 0x90a <__floatsisf+0x6c>
 8de:	88 23       	and	r24, r24
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <__floatsisf+0x48>
 8e2:	96 e9       	ldi	r25, 0x96	; 150
 8e4:	11 c0       	rjmp	.+34     	; 0x908 <__floatsisf+0x6a>
 8e6:	77 23       	and	r23, r23
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <__floatsisf+0x54>
 8ea:	9e e8       	ldi	r25, 0x8E	; 142
 8ec:	87 2f       	mov	r24, r23
 8ee:	76 2f       	mov	r23, r22
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <__floatsisf+0x5e>
 8f2:	66 23       	and	r22, r22
 8f4:	71 f0       	breq	.+28     	; 0x912 <__floatsisf+0x74>
 8f6:	96 e8       	ldi	r25, 0x86	; 134
 8f8:	86 2f       	mov	r24, r22
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	2a f0       	brmi	.+10     	; 0x90a <__floatsisf+0x6c>
 900:	9a 95       	dec	r25
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	da f7       	brpl	.-10     	; 0x900 <__floatsisf+0x62>
 90a:	88 0f       	add	r24, r24
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__fp_split3>:
 914:	57 fd       	sbrc	r21, 7
 916:	90 58       	subi	r25, 0x80	; 128
 918:	44 0f       	add	r20, r20
 91a:	55 1f       	adc	r21, r21
 91c:	59 f0       	breq	.+22     	; 0x934 <__fp_splitA+0x10>
 91e:	5f 3f       	cpi	r21, 0xFF	; 255
 920:	71 f0       	breq	.+28     	; 0x93e <__fp_splitA+0x1a>
 922:	47 95       	ror	r20

00000924 <__fp_splitA>:
 924:	88 0f       	add	r24, r24
 926:	97 fb       	bst	r25, 7
 928:	99 1f       	adc	r25, r25
 92a:	61 f0       	breq	.+24     	; 0x944 <__fp_splitA+0x20>
 92c:	9f 3f       	cpi	r25, 0xFF	; 255
 92e:	79 f0       	breq	.+30     	; 0x94e <__fp_splitA+0x2a>
 930:	87 95       	ror	r24
 932:	08 95       	ret
 934:	12 16       	cp	r1, r18
 936:	13 06       	cpc	r1, r19
 938:	14 06       	cpc	r1, r20
 93a:	55 1f       	adc	r21, r21
 93c:	f2 cf       	rjmp	.-28     	; 0x922 <__fp_split3+0xe>
 93e:	46 95       	lsr	r20
 940:	f1 df       	rcall	.-30     	; 0x924 <__fp_splitA>
 942:	08 c0       	rjmp	.+16     	; 0x954 <__fp_splitA+0x30>
 944:	16 16       	cp	r1, r22
 946:	17 06       	cpc	r1, r23
 948:	18 06       	cpc	r1, r24
 94a:	99 1f       	adc	r25, r25
 94c:	f1 cf       	rjmp	.-30     	; 0x930 <__fp_splitA+0xc>
 94e:	86 95       	lsr	r24
 950:	71 05       	cpc	r23, r1
 952:	61 05       	cpc	r22, r1
 954:	08 94       	sec
 956:	08 95       	ret

00000958 <__fp_zero>:
 958:	e8 94       	clt

0000095a <__fp_szero>:
 95a:	bb 27       	eor	r27, r27
 95c:	66 27       	eor	r22, r22
 95e:	77 27       	eor	r23, r23
 960:	cb 01       	movw	r24, r22
 962:	97 f9       	bld	r25, 7
 964:	08 95       	ret

00000966 <__mulsf3>:
 966:	0b d0       	rcall	.+22     	; 0x97e <__mulsf3x>
 968:	78 c0       	rjmp	.+240    	; 0xa5a <__fp_round>
 96a:	69 d0       	rcall	.+210    	; 0xa3e <__fp_pscA>
 96c:	28 f0       	brcs	.+10     	; 0x978 <__mulsf3+0x12>
 96e:	6e d0       	rcall	.+220    	; 0xa4c <__fp_pscB>
 970:	18 f0       	brcs	.+6      	; 0x978 <__mulsf3+0x12>
 972:	95 23       	and	r25, r21
 974:	09 f0       	breq	.+2      	; 0x978 <__mulsf3+0x12>
 976:	5a c0       	rjmp	.+180    	; 0xa2c <__fp_inf>
 978:	5f c0       	rjmp	.+190    	; 0xa38 <__fp_nan>
 97a:	11 24       	eor	r1, r1
 97c:	ee cf       	rjmp	.-36     	; 0x95a <__fp_szero>

0000097e <__mulsf3x>:
 97e:	ca df       	rcall	.-108    	; 0x914 <__fp_split3>
 980:	a0 f3       	brcs	.-24     	; 0x96a <__mulsf3+0x4>

00000982 <__mulsf3_pse>:
 982:	95 9f       	mul	r25, r21
 984:	d1 f3       	breq	.-12     	; 0x97a <__mulsf3+0x14>
 986:	95 0f       	add	r25, r21
 988:	50 e0       	ldi	r21, 0x00	; 0
 98a:	55 1f       	adc	r21, r21
 98c:	62 9f       	mul	r22, r18
 98e:	f0 01       	movw	r30, r0
 990:	72 9f       	mul	r23, r18
 992:	bb 27       	eor	r27, r27
 994:	f0 0d       	add	r31, r0
 996:	b1 1d       	adc	r27, r1
 998:	63 9f       	mul	r22, r19
 99a:	aa 27       	eor	r26, r26
 99c:	f0 0d       	add	r31, r0
 99e:	b1 1d       	adc	r27, r1
 9a0:	aa 1f       	adc	r26, r26
 9a2:	64 9f       	mul	r22, r20
 9a4:	66 27       	eor	r22, r22
 9a6:	b0 0d       	add	r27, r0
 9a8:	a1 1d       	adc	r26, r1
 9aa:	66 1f       	adc	r22, r22
 9ac:	82 9f       	mul	r24, r18
 9ae:	22 27       	eor	r18, r18
 9b0:	b0 0d       	add	r27, r0
 9b2:	a1 1d       	adc	r26, r1
 9b4:	62 1f       	adc	r22, r18
 9b6:	73 9f       	mul	r23, r19
 9b8:	b0 0d       	add	r27, r0
 9ba:	a1 1d       	adc	r26, r1
 9bc:	62 1f       	adc	r22, r18
 9be:	83 9f       	mul	r24, r19
 9c0:	a0 0d       	add	r26, r0
 9c2:	61 1d       	adc	r22, r1
 9c4:	22 1f       	adc	r18, r18
 9c6:	74 9f       	mul	r23, r20
 9c8:	33 27       	eor	r19, r19
 9ca:	a0 0d       	add	r26, r0
 9cc:	61 1d       	adc	r22, r1
 9ce:	23 1f       	adc	r18, r19
 9d0:	84 9f       	mul	r24, r20
 9d2:	60 0d       	add	r22, r0
 9d4:	21 1d       	adc	r18, r1
 9d6:	82 2f       	mov	r24, r18
 9d8:	76 2f       	mov	r23, r22
 9da:	6a 2f       	mov	r22, r26
 9dc:	11 24       	eor	r1, r1
 9de:	9f 57       	subi	r25, 0x7F	; 127
 9e0:	50 40       	sbci	r21, 0x00	; 0
 9e2:	8a f0       	brmi	.+34     	; 0xa06 <__mulsf3_pse+0x84>
 9e4:	e1 f0       	breq	.+56     	; 0xa1e <__mulsf3_pse+0x9c>
 9e6:	88 23       	and	r24, r24
 9e8:	4a f0       	brmi	.+18     	; 0x9fc <__mulsf3_pse+0x7a>
 9ea:	ee 0f       	add	r30, r30
 9ec:	ff 1f       	adc	r31, r31
 9ee:	bb 1f       	adc	r27, r27
 9f0:	66 1f       	adc	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	91 50       	subi	r25, 0x01	; 1
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	a9 f7       	brne	.-22     	; 0x9e6 <__mulsf3_pse+0x64>
 9fc:	9e 3f       	cpi	r25, 0xFE	; 254
 9fe:	51 05       	cpc	r21, r1
 a00:	70 f0       	brcs	.+28     	; 0xa1e <__mulsf3_pse+0x9c>
 a02:	14 c0       	rjmp	.+40     	; 0xa2c <__fp_inf>
 a04:	aa cf       	rjmp	.-172    	; 0x95a <__fp_szero>
 a06:	5f 3f       	cpi	r21, 0xFF	; 255
 a08:	ec f3       	brlt	.-6      	; 0xa04 <__mulsf3_pse+0x82>
 a0a:	98 3e       	cpi	r25, 0xE8	; 232
 a0c:	dc f3       	brlt	.-10     	; 0xa04 <__mulsf3_pse+0x82>
 a0e:	86 95       	lsr	r24
 a10:	77 95       	ror	r23
 a12:	67 95       	ror	r22
 a14:	b7 95       	ror	r27
 a16:	f7 95       	ror	r31
 a18:	e7 95       	ror	r30
 a1a:	9f 5f       	subi	r25, 0xFF	; 255
 a1c:	c1 f7       	brne	.-16     	; 0xa0e <__mulsf3_pse+0x8c>
 a1e:	fe 2b       	or	r31, r30
 a20:	88 0f       	add	r24, r24
 a22:	91 1d       	adc	r25, r1
 a24:	96 95       	lsr	r25
 a26:	87 95       	ror	r24
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret

00000a2c <__fp_inf>:
 a2c:	97 f9       	bld	r25, 7
 a2e:	9f 67       	ori	r25, 0x7F	; 127
 a30:	80 e8       	ldi	r24, 0x80	; 128
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	60 e0       	ldi	r22, 0x00	; 0
 a36:	08 95       	ret

00000a38 <__fp_nan>:
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	80 ec       	ldi	r24, 0xC0	; 192
 a3c:	08 95       	ret

00000a3e <__fp_pscA>:
 a3e:	00 24       	eor	r0, r0
 a40:	0a 94       	dec	r0
 a42:	16 16       	cp	r1, r22
 a44:	17 06       	cpc	r1, r23
 a46:	18 06       	cpc	r1, r24
 a48:	09 06       	cpc	r0, r25
 a4a:	08 95       	ret

00000a4c <__fp_pscB>:
 a4c:	00 24       	eor	r0, r0
 a4e:	0a 94       	dec	r0
 a50:	12 16       	cp	r1, r18
 a52:	13 06       	cpc	r1, r19
 a54:	14 06       	cpc	r1, r20
 a56:	05 06       	cpc	r0, r21
 a58:	08 95       	ret

00000a5a <__fp_round>:
 a5a:	09 2e       	mov	r0, r25
 a5c:	03 94       	inc	r0
 a5e:	00 0c       	add	r0, r0
 a60:	11 f4       	brne	.+4      	; 0xa66 <__fp_round+0xc>
 a62:	88 23       	and	r24, r24
 a64:	52 f0       	brmi	.+20     	; 0xa7a <__fp_round+0x20>
 a66:	bb 0f       	add	r27, r27
 a68:	40 f4       	brcc	.+16     	; 0xa7a <__fp_round+0x20>
 a6a:	bf 2b       	or	r27, r31
 a6c:	11 f4       	brne	.+4      	; 0xa72 <__fp_round+0x18>
 a6e:	60 ff       	sbrs	r22, 0
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <__fp_round+0x20>
 a72:	6f 5f       	subi	r22, 0xFF	; 255
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__udivmodhi4>:
 a7c:	aa 1b       	sub	r26, r26
 a7e:	bb 1b       	sub	r27, r27
 a80:	51 e1       	ldi	r21, 0x11	; 17
 a82:	07 c0       	rjmp	.+14     	; 0xa92 <__udivmodhi4_ep>

00000a84 <__udivmodhi4_loop>:
 a84:	aa 1f       	adc	r26, r26
 a86:	bb 1f       	adc	r27, r27
 a88:	a6 17       	cp	r26, r22
 a8a:	b7 07       	cpc	r27, r23
 a8c:	10 f0       	brcs	.+4      	; 0xa92 <__udivmodhi4_ep>
 a8e:	a6 1b       	sub	r26, r22
 a90:	b7 0b       	sbc	r27, r23

00000a92 <__udivmodhi4_ep>:
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	5a 95       	dec	r21
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__udivmodhi4_loop>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	bc 01       	movw	r22, r24
 aa0:	cd 01       	movw	r24, r26
 aa2:	08 95       	ret

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
